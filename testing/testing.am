
TEST_CFLAGS = -I${top_srcdir}/testing
TEST_LIBS =  -lMdsTestShr -lm -lrt -lpthread
TEST_SUITE_TAP = test-suite.tap
TEST_BUILD_TAP = test-build.tap

LOG_PY_LOG_COMPILER = python
LOG_PY_LOG_FLAGS = -v
TAP_PY_LOG_COMPILER = nosetests
TAP_PY_LOG_FLAGS = --with-tap --tap-stream
XML_PY_LOG_COMPILER = nosetests
XML_PY_LOG_FLAGS = --with-xml

PL_LOG_COMPILER = $(PERL)
AM_PL_LOG_FLAGS = -w



# not used #
_tap_py_execute = \
 import unittest; \
 import tap; \
 import os; \
 import sys; \
 pt = os.path.dirname(os.path.curdir); \
 loader = unittest.TestLoader(); \
 tests = loader.loadTestsFromName(sys.argv[1]); \
 tr = tap.TAPTestRunner(); \
 tr.set_stream(1); \
 tr.run(tests); 

#prova:
#	echo $(TEST_LOGS);
#	python -c "${_tap_py_execute}" pyex1;




.ONESHELL:
$(TEST_SUITE_TAP):
	export TEST_FORMAT="tap";
	export PY_LOG_COMPILER="$(TAP_PY_LOG_COMPILER)";
	export AM_PY_LOG_FLAGS="$(TAP_PY_LOG_FLAGS)";
	
	## Make all recursive targets here
	$(MAKE) -k $(AM_MAKEFLAGS) all;
	
	## Try to build each targets one by one
	file=$(TEST_BUILD_TAP);
	echo "TAP version 13" > $$file;
	count=0;  result=0;
	for i in $(check_PROGRAMS); do \
	 $(MAKE) -k $(AM_MAKEFLAGS) $$i || \
	   { ((count++)); \
	     echo "not ok $${count} - Build of $${i} failed." >> $$file; \
	   }; \	 
	done; \
	echo "1..$${count}" >> $$file;
	
	## Build results
	$(MAKE) -k $(AM_MAKEFLAGS) $(TEST_LOGS); 
	perl ${top_srcdir}/testing/collate_tap.pl $(TEST_BUILD_TAP) $(TEST_LOGS) > $@;




.PHONY: tap
tap: $(TEST_SUITE_TAP)


# MOSTLYCLEANFILES += $(TEST_SUITE_TAP) $(TEST_BUILD_TAP)






