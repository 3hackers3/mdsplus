
# //////////////////////////////////////////////////////////////////////////// #
# ///  TESTS SECTION   /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #


TEST_CFLAGS = -I${top_srcdir}/testing
TEST_LIBS =  -lMdsTestShr @LIBM@ @THREAD@ @LIBRT@

# ///  select test form env variable  //////////////////////////////////////// #

TEST_BUILDTYPE  = local
TEST_FORMAT    ?= tap

.PHONY: tap xml log
tap: $(TEST_SUITE_TAP)
xml: $(TEST_SUITE_XML)
log: $(TEST_SUITE_LOG)

tests:
	@echo "Making tests ... "; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_FORMAT);



# //////////////////////////////////////////////////////////////////////////// #
# ///  VALGRIND RULES  /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

@VALGRIND_CHECK_RULES@ 



# //////////////////////////////////////////////////////////////////////////// #
# ///  FILL TEST CHAIN  ////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

LOG_DRIVER          ?= @LOG_DRIVER@
TESTS_ENVIRONMENT   ?= @TESTS_ENVIRONMENT@
LOG_COMPILER        ?= @LOG_COMPILER@

PY_LOG_COMPILER     ?= @PY_LOG_COMPILER@
PY_LOG_FLAGS        ?= @PY_LOG_FLAGS@
PY_LOG_COMPILER_TAP ?= @PY_LOG_COMPILER_TAP@
PY_LOG_FLAGS_TAP    ?= @PY_LOG_FLAGS_TAP@




# //////////////////////////////////////////////////////////////////////////// #
# ///  TAP TARGET   ////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

TEST_BUILD_TAP = test-build.tap
TEST_SUITE_TAP = test-suite.tap


$(TEST_BUILD_TAP):
	## Make all recursive targets here without dying. \
	if [ -n "$${VALGRIND_BUILD}" ]; then \
	 echo "building clean tests for valgrind"; \
	 $(MAKE) -k $(AM_MAKEFLAGS) clean all; \
	 ## CFLAGS="${CFLAGS} -D_TESTING" CPPFLAGS="${CPPFLAGS} -D_TESTING"; \
	else \
	 echo "building tests using D_TESTING set"; \
	 $(MAKE) -k $(AM_MAKEFLAGS) clean all \
	 CFLAGS="${CFLAGS} -D_TESTING" CPPFLAGS="${CPPFLAGS} -D_TESTING"; \
	fi; \
        \
	## Try to build failed targets one by one \
	echo "TAP version 13" > $@; \
	count=0; \
	for i in $(check_PROGRAMS); do \
	  if ! $(MAKE) -q $$i; then \
	    $(MAKE) -k $(AM_MAKEFLAGS) $$i || \
	    { ((count++)); \
	      echo "not ok $${count} - Build of $${i} failed." >> $@; \
	    }; \
	  fi; \
	done; \
	echo "1..$${count}" >> $@;


.PHONY: $(TEST_SUITE_TAP)
$(TEST_SUITE_TAP): $(TEST_BUILD_TAP)
	export TEST_FORMAT="tap"; \
	\
	## run tests \
	$(MAKE) -k $(AM_MAKEFLAGS) check-TESTS  \
	 PY_LOG_COMPILER=$(PY_LOG_COMPILER_TAP) \
	 PY_LOG_FLAGS="$(PY_LOG_FLAGS_TAP)"; \
	\
	## collate test-build.tap \
	if [ -n "$(VALGRIND_TOOL)" ]; then suite="$@.$(VALGRIND_TOOL)"; \
	else suite="$@"; \
	fi; \
	perl $(top_srcdir)/testing/collate_tap.pl $(TEST_BUILD_TAP) $(TEST_LOGS) > $${suite} \
	  || exit 1;


## ////////////////////////////////////////////////////////////////////////// ##
## //  LOG  ///////////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

## TODO: add log output
## $(TEST_SUITE_LOG):


## ////////////////////////////////////////////////////////////////////////// ##
## //  XML  ///////////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

## TODO: add xml output
$(TEST_SUITE_XML):



# //////////////////////////////////////////////////////////////////////////// #
# ///  clean  //////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #


.PHONY: clean-local-tests
clean-local-tests:
	-$(RM) -rf $(TEST_BUILD_TAP)








