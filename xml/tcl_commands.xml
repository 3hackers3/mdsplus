<?xml version="1.0" encoding="iso-8859-1"?>
<module name="tcl_commands" prompt="TCL> " def_file=".tcl">

  <helpall>
    TCL (Tree Command Language) commands:

    TCL is used for MDSplus tree examination and manipulation. With TCL
    using edit commands you can create a new tree structure or modify an existing
    one by adding, deleting or renaming nodes and adding tagnames to give direct
    addressing of nodes in the tree. For edit commands type type:
    HELP EDIT COMMANDS

    TCL can also be used to examine the tree structure, store or get data to or
    from nodes, examine or change node properties, of clean or compress the datafile
    associated with a tree. These commands are listed
    when you type: HELP TREE COMMANDS

    TCL can also be used for dispatching commands or actions to action servers or to
    directly execute the methods provided by devices described in the tree. For help
    on dispatching related commands type: HELP DISPATCH COMMANDS
  </helpall>

  <help name="EDIT COMMANDS">
    The following commands are available for editing the structure of an MDSplus tree:

    ADD NODE      - Add a node to an MDSplus tree.
    ADD TAG       - Assign a tagname to a node in the tree.
    CLOSE         - Close one or more trees currently open by this process.
    DELETE NODE   - Delete a node in an MDSplus tree.
    DIRECTORY     - List the nodes in a tree.
    DIRECTORY/TAG - List tagnames in a tree.
    EDIT          - Open a tree or create a new tree for subsequent editing.
    REMOVE TAG    - Remove a tagname.
    RENAME        - Rename a node in a tree.
    SET DEFAULT   - Change current location in a tree.
    SET VERSIONS  - Enable data version support in a tree.
    SHOW DB       - Show the tree currently opened.
    SHOW DEFAULT  - Show the current location in a tree.
    SHOW VERSIONS - Shot whether or not versioning is enabled in the tree.
    WRITE         - Write out a modified tree committing edit changes.

    Type HELP command-name for more information on the command.
  </help>
  <help name="TREE COMMANDS">
    The following commands are available for viewing or manipulating data and
    attributes of nodes in a tree:

    CLOSE         - Close one or more trees currently open by this process.
    CREATE PULSE  - Create a new pulse file.
    DECOMPILE     - Decompile the data stored in a node.
    DELETE PULSE  - Delete a pulse file.
    DIRECTORY     - List the nodes in a tree.
    DIRECTORY/TAG - List the tagnames in a tree.
    SET DEFAULT   - Change the current location in a tree.
    SET TREE      - Open an MDSplus tree.
    SHOW DATA     - Show the data structure stored in a node.
    SHOW DB       - Show the tree currently opened.
    SHOW DEFAULT  - Show the current location in a tree.
    SHOW VERSIONS - Show whether versions are enabled in the tree.

    Type HELP command-name for more information on the command.
  </help>

  <help name="DISPATCH COMMANDS">
    The following commands are available for dispatching
    or executing actions in an MDSplus tree.

    ABORT SERVER     - Abort the action currently executing in an action server.
    DISPATCH         - Dispatch an action node to an action server.
    DISPATCH/BUILD   - Build a dispatch table in preparation for dispatch action phases.
    DISPATCH/CHECK   - Determine if all essential actions dispatched completed successfully.
    DISPATCH/CLOSE   - Send a close tree command to all action servers used in dispatched phases.
    DISPATCH/COMMAND - Dispatch a commands to an action server.
    DISPATCH/PHASE   - Dispatch the actions associated with an experiment phase.
    DO               - Execute an action in a tree.
    DO/METHOD        - Execute a method provided by a device in a tree.
    SHOW SERVER      - Show the current status of an action server.
    STOP SERVER      - Stop an action server.
    
    Type HELP command-name for more information on the command.
  </help>
  
  <verb name="abort">
    <parameter name="p1" prompt="What" required="True" type="abort_type"/>
  </verb>
  <type name="abort_type">
    <keyword name="SERVER" syntax="abort_server"/>"
  </type>
  <syntax name="abort_server">
    <routine name="TclDispatch_abort_server"/>
    <help name="ABORT SERVER">
      Command: ABORT SERVER
      Purpose: Abort the action currently being executed by an MDSplus action server.
      Format: ABORT SERVER server-name
      Description:
      
      The ABORT SERVER command will abort the action currently being executed in an
      MDSplus action server. Actions are executed in servers when dispatched using
      the DISPATCH command.
    </help>
    <parameter name="p1" prompt="What" required="True" type="stop_type"/>
    <parameter name="p2" label="server_name" prompt="Server" required="True" list="True"/>
  </syntax>
  
  <verb name="add">
    <parameter name="p1" prompt="What" required="True" type="ADD_TYPE"/>
  </verb>
  <type name="ADD_TYPE">
    <keyword name="NODE" syntax="add_node"/>"
    <keyword name="TAG" syntax="add_tag"/>"
  </type>

  <syntax name="add_node">
    <routine name="TclAddNode"/>
    <help name="ADD NODE">
      Command: ADD NODE
      Purpose: Add a new node to a tree opened for edit.
      Format: ADD NODE node-path [/USAGE=usage]|[/MODEL=device-type]
      Description:

      The ADD NODE command is used to add a new node to an MDSplus tree which has been
      opened using the EDIT command. The node-path parameter specified the name of the new
      node to be added. It can be an absolute node path or a relative node path. If the path
      name includes parent nodes, those parent nodes must already exist or the command will fail.
      Node names must begin with an alphabetic character followed by zero or more alphanumeric
      or underscore characters. The node name must be 12 characters or less in length.

      The /USAGE qualifier specifies a usage type of the node. This must be one of:
      ACTION, ANY, AXIS, COMPOUND_DATA, DEVICE, DISPATCH, NUMERIC, SIGNAL,
      STRUCTURE, SUBTREE, TEXT or WINDOW. If not specified, a member node (:name) will
      default to usage ANY and a child node (.name) will default to usage STRUCTURE.

      If adding a device (i.e. data acquisition device) use the /MODEL qualifier to specify
      the type of supported devide you are adding.

      NOTE: The ADD NODE command can only be used when a tree is opened for edit.
    </help>
    <parameter name="p1" prompt="What" required="True" type="ADD_TYPE"/>
    <parameter name="p2" label="NODENAME" prompt="Node" required="True"/>
    <qualifier name="model" required="True"/>
    <qualifier name="usage" defaulted="True" default="ANY"/>
    <qualifier name="qualifiers" obsolete="yes"/>
  </syntax>

  <syntax name="add_tag">
    <routine name="TclAddTag"/>
    <help name="ADD TAG">
      Command: ADD TAG
      Purpose: Add a tag to a node.
      Format: ADD TAG node-path tagname
      Description:

      The ADD TAG command is used to add a tagname to a node. A tagname is
      kind of a shortcut for referencing a node in the tree. You don't need
      to known the full path location of the node if you reference it by its
      tagname. For example if a node has a tagname of "ip" you could reference
      that node by using \ip or \treename:ip. The tagname has to be unique
      for a given tree. Tagnames can be up to 23 characters in length and must
      consist of an alphabetic character followed by up to 22 alphanumeric or
      underscore characters.

      NOTE: The ADD TAG command can only be used when you have opened the tree
      using the EDIT command.
    </help>
    <parameter name="p1" prompt="What" required="True" type="ADD_TYPE"/>
    <parameter name="p2" label="NODE" prompt="Node" required="True"/>
    <parameter name="p3" label="TAGNAME" prompt="Tag" required="True"/>
  </syntax>

  <verb name="clean">
    <routine name="TclCleanDatafile"/>
    <help name="CLEAN">
      Command: CLEAN
      Purpose: Clean unused space in the trees datafile.
      Format: CLEAN treename [/SHOT=shot-number]
      Description:

      As data is written to a tree if the record is greater than 16 bytes
      in length it is appended to the end of the tree's datafile. When the
      data in a node is modified, unless the size of the data is exactly the
      same length as was previously stored, the new data is appended at the
      end of the datafile. The previous data continues to occupy it's original
      space in the datafile and will not be reused. The CLEAN command can be
      used to recover this wasted space. When the command is issued, the
      datafile is recreated by reading in the current data for each node and
      writing it to the new datafile thus discarding the orphaned data in
      the file.

      The CLEAN command is similar to the COMPRESS command except the COMPRESS
      command will also employ data compression on the data records often
      drastically reducing the file size if the nodes were not set to be
      compressed on put.

      Since both the CLEAN and COMPRESS command create new datafiles, it is
      recommended that they only be used when there is unlikely to be any other
      write activity on the tree.
    </help>
    <parameter name="p1" label="FILE" prompt="File" required="True"/>
    <qualifier name="shotid" defaulted="True" nonnegatable="True" default="-1" type="number"/>
    <qualifier name="override"/>
  </verb>

  <verb name="close">
    <routine name="TclClose"/>
    <parameter name="p1" label="FILE"/>
    <qualifier name="shotid" defaulted="True" nonnegatable="True" default="-1" type="number"/>
    <qualifier name="confirm" defaulted="True"/>
    <qualifier name="all"/>
  </verb>

  <verb name="compress">
    <routine name="TclCompressDatafile"/>
    <parameter name="p1" label="FILE" prompt="File" required="True"/>
    <qualifier name="shotid" defaulted="True" nonnegatable="True" default="-1" type="number"/>
    <qualifier name="override"/>
  </verb>

  <verb name="create">
    <parameter name="p1" prompt="What" required="True" type="CREATE_TYPE"/>
  </verb>

  <type name="CREATE_TYPE">
    <keyword name="PULSE" syntax="create_pulse"/>"
  </type>

  <syntax name="create_pulse">
    <routine name="TclCreatePulse"/>
    <parameter name="p1" prompt="What" required="True" type="CREATE_TYPE"/>
    <parameter name="p2" label="shot" prompt="Shot number" required="True"/>
    <qualifier name="include" required="True" list="True"/>
    <qualifier name="exclude" required="True" list="True"/>
    <qualifier name="conditional"/>
    <qualifier name="nomain" nonnegatable="True"/>
    <qualifier name="dispatch"/>
  </syntax>

  <verb name="DECOMPILE">
    <routine name="TclDecompile"/>
    <parameter name="p1" label="PATH" required="True"/>
  </verb>

  <type name="DEFINE_TYPE">
    <keyword name="SERVER" syntax="define_server"/>"
  </type>
  
  <verb name="DEFINE">
    <parameter name="p1" prompt="WHAT" required="True" type="DEFINE_TYPE"/>
  </verb>

  <syntax name="define_server">
    <routine name="TclCreatePulse_server"/>
    <parameter name="p1" prompt="WHAT" required="True" type="DEFINE_TYPE"/>
    <parameter name="p2" required="True"/>
    <qualifier name="tree" required="True" list="True"/>
  </syntax>

  <verb name="delete">
    <parameter name="p1" prompt="What" required="True" type="DELETE_TYPE"/>
  </verb>

  <type name="DELETE_TYPE">
    <keyword name="NODE" syntax="delete_node"/>"
    <keyword name="PULSE" syntax="delete_pulse"/>"
  </type>

  <syntax name="delete_node">
    <routine name="TclDeleteNode"/>
    <parameter name="p1" prompt="What" required="True" type="DELETE_TYPE"/>
    <parameter name="p2" prompt="Node" label="NODENAME" required="True" list="True"/>
    <qualifier name="log"/>
    <qualifier name="confirm" defaulted="True"/>
  </syntax>

  <syntax name="delete_pulse">
    <routine name="TclDeletePulse"/>
    <parameter name="p1" prompt="What" required="True" type="DELETE_TYPE"/>
    <parameter name="p2" prompt="Shot number" label="shot" required="True" type="NUMBER"/>
    <qualifier name="all"/>
  </syntax>

  <verb name="directory">
    <routine name="TclDirectory"/>
    <parameter name="p1" label="NODE" default="*,.*" list="True"/>
    <qualifier name="full"/>
    <qualifier name="path"/>
    <qualifier name="usage" list="True" type="USAGE_TYPE"/>
    <qualifier name="tag" syntax="dir_tag_syntax"/>
  </verb>

  <syntax name="dir_tag_syntax">
    <routine name="TclDirectoryTag"/>
    <parameter name="p1" label="TAG" default="*::*" list="True"/>
  </syntax>

  <verb name="dispatch">
    <routine name="TclDispatch"/>
    <parameter name="p1" label="NODE"/>
    <qualifier name="wait" defaulted="True"/>
    <qualifier name="build" syntax="dispatch_build"/>
    <qualifier name="check" syntax="dispatch_check"/>
    <qualifier name="phase" syntax="dispatch_phase"/>
    <qualifier name="close" syntax="dispatch_close"/>
    <qualifier name="command" syntax="dispatch_command"/>
  </verb>

  <syntax name="dispatch_build">
    <routine name="TclDispatch_build"/>
    <qualifier name="monitor" required="True"/>
  </syntax>

  <syntax name="dispatch_check">
    <routine name="TclDispatch_check"/>
    <qualifier name="reset"/>
  </syntax>

  <syntax name="dispatch_phase">
    <routine name="TclDispatch_phase"/>
    <parameter name="p1" label="PHASE_NAME" prompt="Phase" required="True"/>
    <qualifier name="phase"/>
    <qualifier name="noaction"/>
    <qualifier name="synch" defaulted="True" nonnegatable="True" default="1" type="NUMBER"/>
    <qualifier name="log" defaulted="True"/>
    <qualifier name="monitor" required="True"/>
  </syntax>

  <syntax name="dispatch_close">
    <routine name="TclDispatch_close"/>
    <qualifier name="close"/>
    <qualifier name="server" required="True" list="True"/>
  </syntax>
  
  <syntax name="dispatch_command">
    <routine name="TclDispatch_command"/>
    <qualifier name="command"/>
    <qualifier name="server" required="True"/>
    <qualifier name="wait"/>
    <qualifier name="table" defaulted="True" nonnegatable="True" default="TCL"/>
    <parameter name="p1" type="rest_of_line"/>
  </syntax>

  <verb name="do">
    <routine name="TclDoNode"/>
    <parameter name="p1" label="NODE" prompt="Node" required="True"/>
    <qualifier name="method" syntax="do_method"/>
  </verb>

  <syntax name="do_method">
    <routine name="TclDoMethod"/>
    <parameter name="p1" label="object" prompt="Object" required="True"/>
    <parameter name="p2" label="method" prompt="Method" required="True"/>
    <qualifier name="argument" required="True" list="True"/>
    <qualifier name="if" required="True"/>
    <qualifier name="override"/>
  </syntax>
  
  <verb name="edit">
    <routine name="TclEdit"/>
    <help name="EDIT">
      Command: EDIT
      Purpose: Create a new MDSplus tree or open an existing tree to add nodes or tags.
      Format: EDIT treename [/SHOT=shot-number] [/NEW]
      Description:

      The EDIT command is used to edit or create an MDSplus tree file. Before you can edit or
      create a tree file you must have treename_path environment variable set to define the
      location of the tree files (i.e. mytree_path=/home/me/mytreedir).

      The /SHOT qualifier is used to specify a shot number to edit or create. If the /SHOT qualifier
      is not specified, the EDIT command will default to shot number -1, the "model" tree.

      If the /NEW qualifier is specified then a new empty tree will be created overriding any
      existing tree if one exists.

      Note: Once you are done editing a tree you must use the WRITE command to save any
      structural changes you might have made to the tree.
    </help>
    <parameter name="p1" label="FILE" prompt="File" required="True"/>
    <qualifier name="shotid" defaulted="True" nonnegatable="True" default="-1" type="number"/>
    <qualifier name="new"/>
  </verb>

  <verb name="link">
    <routine name="TclLink"/>
    <parameter name="p1" label="SOURCE" prompt="Source experiment" required="True"/>
    <parameter name="p2" label="DESTINATION" prompt="Destination experiment" required="True"/>
  </verb>

  <verb name="mark">
    <routine name="TreeMarkIncludes"/>
  </verb>

  <verb name="put">
    <routine name="TclPutExpression"/>
    <parameter name="p1" label="NODE" prompt="Node" required="True"/>
    <parameter name="p2" label="VALUE" prompt="Value" required="True"/>
    <qualifier name="EXTENDED" syntax="put_extended"/>
  </verb>

  <syntax name="put_extended">
    <routine name="TclPutExpression"/>
    <parameter name="p1" label="NODE" prompt="Node" required="True"/>
    <qualifier name="EXTENDED" defaulted="True"/>
    <qualifier name="SYMBOLS"/>
    <qualifier name="LF" defaulted="True"/>
    <qualifier name="EOF" required="True"/>
  </syntax>

  <verb name="tcl">
    <routine name="TclCommand"/>
    <parameter name="p1" type="rest_of_line"/>
    <qualifier name="tables" defaulted="True" default="TclCommands" list="True"/>
    <qualifier name="helplib" defaulted="True" default="TCLHELP"/>
    <qualifier name="auxhelplib" defaulted="True" default="MDSDCL,DATABASE_COMMANDS"/>
    <qualifier name="prompt" defaulted="True" default="TCL>"/>
    <qualifier name="def_file" defaulted="True" default="*.TCL"/>
    <qualifier name="key_defs" defaulted="True" default="TCLkeys"/>
    <qualifier name="def_libraries" defaulted="True" default="TCL$library"/>
    <qualifier name="command" defaulted="True" default="TCLinit"/>
    <qualifier name="ini_def_File" defaulted="True" default="sys$login:*.TCL"/>
    <qualifier name="library" required="True"/>
    <qualifier name="DEBUG"/>
  </verb>

  <verb name="remove">
    <parameter name="p1" prompt="What" required="True" type="REMOVE_TYPE"/>
  </verb>
  <type name="REMOVE_TYPE">
    <keyword name="TAG" syntax="remove_tag"/>"
  </type>

  <syntax name="remove_tag">
    <routine name="TclRemoveTag"/>
    <parameter name="p1" prompt="What" required="True" type="REMOVE_TYPE"/>
    <parameter name="p2" label="TAGNAME" prompt="Tag" required="True"/>
  </syntax>

  <verb name="RENAME">
    <routine name="TclRename"/>
    <parameter name="p1" label="SOURCE" required="True"/>
    <parameter name="p2" label="DEST" required="True"/>
    <qualifier name="LOG"/>
  </verb>

  <verb name="rundown">
    <parameter name="p1" prompt="What" required="True" type="RUNDOWN_TYPE"/>
  </verb>

  <type name="RUNDOWN_TYPE">
    <keyword name="TREE" syntax="rundown_tree"/>"
  </type>

  <syntax name="rundown_tree">
    <routine name="TclRundownTree"/>
    <parameter name="p1" prompt="What" required="True" type="RUNDOWN_TYPE"/>
    <parameter name="p2" label="FILE" prompt="File" required="True"/>
    <qualifier name="shotid" defaulted="True" nonnegatable="True" default="-1"/>
    <qualifier name="force_exit"/>
    <qualifier name="subtrees"/>
  </syntax>

  <verb name="set">
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
  </verb>

  <type name="SET_TYPE">
    <keyword name="ATTRIBUTE" syntax="set_attribute"/>"
    <keyword name="CURRENT" syntax="set_current"/>"
    <keyword name="DEFAULT" syntax="set_default"/>"
    <keyword name="NODE" syntax="set_node"/>"
    <keyword name="SERVER" syntax="set_server"/>"
    <keyword name="TREE" syntax="set_tree"/>"
    <keyword name="VIEW" syntax="set_view"/>"
    <keyword name="VERSIONS" syntax="set_versions"/>"
  </type>

  <syntax name="set_attribute">
    <routine name="TclSetAttribute"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="NODE" prompt="Node" required="True"/>
    <parameter name="p3" label="VALUE" prompt="Value" required="True"/>
    <qualifier name="NAME" nonnegatable="True" required="True"/>
    <qualifier name="EXTENDED" syntax="set_attribute_extended"/>
  </syntax>

  <syntax name="set_attribute_extended">
    <routine name="TclSetAttribute"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="NODE" prompt="Node" required="True"/>
    <qualifier name="EXTENDED" defaulted="True"/>
    <qualifier name="SYMBOLS"/>
    <qualifier name="LF" defaulted="True"/>
    <qualifier name="EOF" required="True"/>
    <qualifier name="NAME" nonnegatable="True" required="True"/>
  </syntax>

  <syntax name="set_current">
    <routine name="TclSetCurrent"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="experiment" prompt="Experiment" required="True"/>
    <parameter name="p3" label="shot"/>
    <qualifier name="increment"/>
  </syntax>

  <syntax name="set_view">
    <routine name="TclSetView"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="DATE" prompt="Date" required="True"/>
  </syntax>

  <syntax name="set_default">
    <routine name="TclSetDefault"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="NODE" prompt="Node" required="True"/>
  </syntax>

  <syntax name="set_node">
    <routine name="TclSetNode"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="NODENAME" prompt="Node" required="True"/>
    <qualifier name="SUBTREE"/>
    <qualifier name="ON"/>
    <qualifier name="OFF"/>
    <qualifier name="WRITE_ONCE"/>
    <qualifier name="CACHED"/>
    <qualifier name="COMPRESS_ON_PUT"/>
    <qualifier name="COMPRESS_SEGMENTS"/>
    <qualifier name="DO_NOT_COMPRESS"/>
    <qualifier name="SHOT_WRITE"/>
    <qualifier name="MODEL_WRITE"/>
    <qualifier name="INCLUDED"/>
    <qualifier name="LOG"/>
    <qualifier name="ESSENTIAL"/>
    <qualifier name="STATUS" required="True"/>
  </syntax>

  <syntax name="set_server">
    <routine name="TclDispatch_set_server"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="server" prompt="Server" required="True"/>
    <qualifier name="log" nonnegatable="True" default="ACTIONS" type="logging_type"/>
  </syntax>

  <type name="logging_type">
    <keyword name="NONE" default="0" type="NUMBER"/>
    <keyword name="ACTIONS" defaulted="True" default="1" type="NUMBER"/>
    <keyword name="STATISTICS" default="2" type="NUMBER"/>
  </type>

  <syntax name="set_tree">
    <routine name="TclSetTree"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="FILE" prompt="File" required="True"/>
    <qualifier name="shotid" defaulted="True" nonnegatable="True" default="-1"/>
    <qualifier name="readonly"/>
  </syntax>

  <syntax name="set_versions">
    <routine name="TclSetVersions"/>
    <qualifier name="MODEL"/>
    <qualifier name="SHOT"/>
  </syntax>

  <verb name="SETEVENT">
    <routine name="TclSetEvent"/>
    <parameter name="p1" label="EVENT" prompt="Event" required="True"/>
  </verb>

  <verb name="show">
    <parameter name="p1" prompt="What" required="True" type="show_TYPE"/>
  </verb>

  <type name="show_TYPE">
    <keyword name="ATTRIBUTE" syntax="show_attribute"/>"
    <keyword name="CURRENT" syntax="show_current"/>"
    <keyword name="DATA" syntax="show_data"/>"
    <keyword name="DB" syntax="show_db"/>"
    <keyword name="DEFAULT" syntax="show_default"/>"
    <keyword name="SERVER" syntax="show_server"/>"
    <keyword name="VERSION" syntax="show_version"/>"
    <keyword name="VERSIONS" syntax="show_versions"/>"
  </type>

  <syntax name="show_attribute">
    <routine name="TclShowAttribute"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="node" prompt="Node" required="True"/>
    <qualifier name="name" nonnegatable="True" required="True"/>
  </syntax>

  <syntax name="show_current">
    <routine name="TclShowCurrent"/>
    <parameter name="p1" prompt="What" required="True" type="SET_TYPE"/>
    <parameter name="p2" label="experiment" prompt="Experiment" required="True"/>
  </syntax>

  <syntax name="show_data">
    <routine name="TclShowData"/>
    <parameter name="p1" prompt="What" required="True" type="show_TYPE"/>
    <parameter name="p2" label="NODE" prompt="Node" required="True" list="True"/>
  </syntax>

  <syntax name="show_db">
    <routine name="TclShowDB"/>
    <parameter name="p1" prompt="What" required="True" type="show_TYPE"/>
  </syntax>

  <syntax name="show_default">
    <routine name="TclShowDefault"/>
    <parameter name="p1" prompt="What" required="True" type="show_TYPE"/>
  </syntax>

  <syntax name="show_server">
    <routine name="TclDispatch_show_server"/>
    <parameter name="p1" prompt="What" required="True" type="stop_type"/>
    <parameter name="p2" label="server_name" prompt="Server" required="True" list="True"/>
    <qualifier name="output" defaulted="True"/>
    <qualifier name="full"/>
  </syntax>

  <syntax name="show_version">
    <routine name="TclShowVersion"/>
    <parameter name="p1" prompt="What" required="True" type="show_TYPE"/>
  </syntax>

  <syntax name="show_versions">
    <routine name="TclShowVersions"/>
    <parameter name="p1" prompt="What" required="True" type="show_TYPE"/>
  </syntax>

  <verb name="start">
    <parameter name="p1" prompt="What" required="True" type="start_TYPE"/>
  </verb>

  <syntax name="start_server">
    <routine name="TclDispatch_start_server"/>
    <parameter name="p1" prompt="What" required="True" type="start_type"/>
    <parameter name="p2" label="server" prompt="Server" required="True" list="True"/>
  </syntax>

  <type name="start_TYPE">
    <keyword name="SERVER" syntax="start_server"/>"
  </type>

  <verb name="stop">
    <parameter name="p1" prompt="What" required="True" type="stop_type"/>
  </verb>

  <type name="stop_type">
    <keyword name="SERVER" syntax="stop_server"/>"
  </type>

  <syntax name="stop_server">
    <routine name="TclDispatch_stop_server"/>
    <parameter name="p1" prompt="What" required="True" type="stop_type"/>
    <parameter name="p2" label="servnam" prompt="Server" required="True" list="True"/>
  </syntax>

  <verb name="verify">
    <routine name="TclVerifyTree"/>
  </verb>

  <verb name="WFEVENT">
    <routine name="TclWfevent"/>
    <parameter name="p1" label="event" prompt="Event" required="True"/>
  </verb>

  <verb name="write">
    <routine name="TclWrite"/>
    <parameter name="p1" label="FILE"/>
    <qualifier name="shotid" defaulted="True" nonnegatable="True" default="-1" type="number"/>
  </verb>

  <verb name="ls" type="rest_of_line">
    <routine name="TclLs"/>
  </verb>
  
</module>
